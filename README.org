* minimal headless script runner
Usage: =headless [entryScript] [...args]=

Run a headless browser and execute =entryScript=
- the current directory is served at =window.baseUrl=
- command line arguments are available as =window.args=
- call =window.close(code)= to exit the process
  - the method is called =close= rather than =exit= because =window.close= always [[https://www.google.com/search?channel=fs&client=ubuntu&q=window+close][exists]] and thus does not couple the script to =headless=
- call =console.log=, ... to log to the console

* Motivation
I want to run js in a headless browser from bash - e.g. to automate running my clientside js tests.
There's a lot of js test runners and libraries for controlling headless browsers out there already.
But those are huge and the [[https://chromedevtools.github.io/devtools-protocol/][devtools protocol]] provides us with all we need with just a websocket connection:
- [[https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-navigate][Page.navigate]] + [[https://chromedevtools.github.io/devtools-protocol/tot/Page/#event-frameStoppedLoading][Page.frameStoppedLoading]] to open a page containing the script to run as well as some setup code
- [[https://chromedevtools.github.io/devtools-protocol/tot/Runtime/#event-exceptionThrown][Runtime.ExceptionThrown]] notifies us of uncaught exceptions
- [[https://chromedevtools.github.io/devtools-protocol/tot/Runtime/#event-consoleAPICalled][Runtime.consoleAPICalled]] notifies us of console messages. It's used for all communication needs with the backend
